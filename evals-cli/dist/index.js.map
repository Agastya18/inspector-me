{"version":3,"sources":["../src/index.ts","../src/commands/evals.ts","../src/utils/logger.ts"],"sourcesContent":["import { config } from \"dotenv\";\nimport { Command } from \"commander\";\nimport { evalsCommand } from \"./commands/evals.js\";\n\n// Load environment variables from .env file\nconfig();\n\nconst program = new Command();\n\nprogram\n  .name(\"mcpjam\")\n  .description(\"MCPJam CLI for programmatic MCP testing\")\n  .version(\"1.0.0\");\n\nprogram.addCommand(evalsCommand);\n\nprogram.parse();\n","import { Command } from \"commander\";\nimport { readFile } from \"fs/promises\";\nimport { resolve } from \"path\";\nimport { Logger } from \"../utils/logger.js\";\n\n// node dist/index.js evals run -t examples/test-servers.json -e examples/mcp-environment.json\n\nexport const evalsCommand = new Command(\"evals\");\n\nevalsCommand\n  .description(\"Run MCP evaluations\")\n  .command(\"run\")\n  .description(\"Run tests against MCP servers\")\n  .requiredOption(\"-t, --tests <file>\", \"Path to tests JSON file\")\n  .requiredOption(\"-e, --environment <file>\", \"Path to environment JSON file\")\n  .requiredOption(\"-a, --api-key <key>\", \"Personal access key\")\n  .action(async (options) => {\n    try {\n      Logger.header(\"v1.0.0\");\n      console.log(`Running tests from ${options.tests}`);\n\n      // Read and parse test file\n      const testsContent = await readFile(resolve(options.tests), \"utf8\");\n      const testsData = JSON.parse(testsContent);\n\n      // Read and parse environment file\n      const envContent = await readFile(resolve(options.environment), \"utf8\");\n      const envData = JSON.parse(envContent);\n\n      const apiKey = options.apiKey;\n      console.log(envData);\n      // Determine Convex base URL\n      const url: string =\n        `${process.env.CONVEX_URL}/evals` ||\n        \"https://outstanding-fennec-304.convex.site/evals\";\n\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          tests: testsData.tests,\n          environment: envData,\n          apiKey: apiKey,\n        }),\n      });\n\n      if (!response.ok) {\n        const text = await response.text().catch(() => \"\");\n        throw new Error(\n          `Backend error: ${response.status} ${response.statusText}${\n            text ? ` - ${text}` : \"\"\n          }`,\n        );\n      }\n\n      const json = (await response.json()) as any;\n      console.log(json);\n    } catch (error) {\n      Logger.error(error instanceof Error ? error.message : String(error));\n      process.exit(1);\n    }\n  });\n","import chalk from \"chalk\";\nimport Table from \"cli-table3\";\n\nexport class Logger {\n  private static progressCounter = 0;\n  private static totalTests = 0;\n\n  static header(version: string): void {\n    console.log(chalk.bold.blue(`MCPJAM CLI ${version}`));\n    console.log();\n  }\n\n  static startTests(count: number): void {\n    this.progressCounter = 0;\n    this.totalTests = count;\n    console.log(chalk.gray(`Running ${count} tests...`));\n    console.log();\n  }\n\n  static toolCall(toolName: string): void {\n    console.log(chalk.gray(`Tool called: ${toolName}`));\n  }\n\n  static error(message: string): void {\n    console.log();\n    console.log(chalk.red(`✕ Error: ${message}`));\n  }\n\n  static progress(current: number, total: number, testName: string): void {\n    const progress = `[${current}/${total}]`;\n    console.log(chalk.gray(`${progress} ${testName}...`));\n  }\n\n  static testStarting(testName: string): void {\n    console.log(chalk.gray(`  Running ${testName}...`));\n  }\n\n  static serverConnection(serverCount: number, toolCount: number): void {\n    console.log(\n      chalk.gray(\n        `  Connected to ${serverCount} servers (${toolCount} tools available)`,\n      ),\n    );\n  }\n\n  static testError(testName: string, error: string): void {\n    console.log(chalk.red(`  ✕ ${testName} failed: ${error}`));\n  }\n\n  static connectionError(serverName: string, error: string): void {\n    console.log(chalk.red(`  ✕ Failed to connect to ${serverName}: ${error}`));\n  }\n\n  static apiKeyError(provider: string, error: string): void {\n    console.log(chalk.red(`  ✕ API key error for ${provider}: ${error}`));\n  }\n\n  static modelCreationError(\n    provider: string,\n    modelId: string,\n    error: string,\n  ): void {\n    console.log(\n      chalk.red(\n        `  ✕ Failed to create ${provider} model \"${modelId}\": ${error}`,\n      ),\n    );\n  }\n}\n"],"mappings":"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","names":["Command","Command"]}